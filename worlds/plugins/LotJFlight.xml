<?xml version="1.0" encoding="iso-8859-1" ?> 
<!DOCTYPE muclient> 
<!--  Saved on Wednesday, July 25, 2012, 7:14 PM   -->  
<muclient>
<plugin name="LotJFlight" author="@Johnson" id="680bf1a4e5e600854747c379" language="Lua" purpose="Flight Made Easy" save_state="y" requires="4.40" version="1.51">
<description trim="y">
<![CDATA[ 
'FlyHelp'      - To see the list of commands associated with this plugin.
ChangeLog - 
v1.45 -
	Added flyclear alias to reset all variables before a new flight.
v1.44 -
	Correctly prompts for exit directions and landing preference when using flyfinish.
	Added flystatus alias to display current flight information.
v1.42 -
	Fixed auto landing mechanism.
  ]]> 
  </description>
  </plugin>
<!--   Get our standard constants   --> 
	<include name="constants.lua" /> 
<!--   Triggers    --> 
<triggers>
	<trigger name="LaunchComp" match="^Launch complete\.$" script="calcPlanet" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="CalcDone" match="^\[Status\]\: Hyperspace calculations have been completed\.$" script="calcDone" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="HyperComp" match="^Hyperjump complete\.$" script="coursePlanet" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="OrbitObtained" match="^You begin orbiting (.*)\.$" script="doLand" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="LandGrabStart" match="^Possible choices for (.*)\:$" script="startLandGrab" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="MatchLine" match="^(.*)$" script="landGrab" group="landGrab" enabled="n" regexp="y" keep_evaluating="y" omit_from_log="n" omit_from_output="n" sequence="100" />
	<trigger name="LandGrabEnd" match="^$" script="endLandGrab" group="landGrab" enabled="n" regexp="y" sequence="100" />
	<trigger name="LandStarted" match="^You begin to land on (.*)\.$" script="landing" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="LandComp" match="^Landing sequence complete\.$" script="endFlight" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="Proximity" match="^You are too close to (.*) to make the jump to lightspeed\!$" script="waitHyper" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="landsitelocked" match="^Restricted Landing pad\. Limited to clans members and ships only\.$" script="landNext" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="LeftShip" match="^You exit the ship\.$" script="reenterCheck" group="Flight" enabled="n" regexp="y" sequence="100" />
  <trigger name="squadronlaunched" match="^(?P<fightertype>.+?) '(?P<fightername>.+?)' launches from a hangar on (?P<hangartype>.+?) '(?P<hangarname>.+?)'\,(.*)$" script="fighterGrab" group="Squadron" enabled="y" regexp="y" sequence="100" />
  <trigger name="squadronview" match="^(L\[(.*)\]\:P\[(.*)\] )?(?P<fightertype>.+?) '(?P<fightername>.+?)'((\s+[\d-]+\s[\d-]+\s[\d-]+|\s+Prox\: \d+))?$" script="fighterShow" group="Squadron" enabled="y" regexp="y" sequence="100" />
  <trigger match="^Checking hyperspace course integrity\. Please wait\.$" script="calcEntered" group="Flight" regexp="y" sequence="100" />
  <trigger match="^Please wait until the ship has finished its current maneuver\.$" script="waitHyper" group="Flight" regexp="y" sequence="100" />

</triggers>

<aliases>
	<alias name="Flytoarg" match="flyto *" script="beginFlight" enabled="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="Flyfinish" match="^flyfinish (.*)$" script="finishFlight" regexp="y" enabled="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="Flystatus" match="flystatus" script="flightStatus" enabled="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="Flyauto" match="^flyauto( +(.*))?$" script="flyAuto" enabled="y" regexp="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="Flyclear" match="flyclear" script="flyClear" enabled="y" regexp="n" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="FlyHelp" match="^flyhelp$" script="flightHelp" enabled="y" regexp="y" group="FlightCmd" ignore_case="y" sequence="100" />
  <alias match="^flychecksale$" script="toggleCheckSale" enabled="y" regexp="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="FlyReenterToggle" match="^flyreenter(\s*(.*))?$" script="toggleReenter" enabled="y" regexp="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="fighterclear" match="fighterclear" script="fighterClear" enabled="y" regexp="n" group="FlightCmd" ignore_case="y" sequence="100" />
  <alias match="^flyland(\s*(.*))?$" script="flyLand" enabled="y" regexp="y" group="FlightCmd" ignore_case="y" sequence="100" />
</aliases>
<!--   Script    --> 
<script>
<![CDATA[
local shipName = ""
local hatchCode = -1
local shipEnterDirs = ""
local shipLeaveDirs = ""
local pilotToNav = ""
local navToPilot = ""
local planetName = ""
local lastPlanet = ""
local autoFly = false
local landingSites = {}
local landingSiteNum = 0
local landgrabbing = false
local landPreference = -1
local hangars = {}
local reentership = false
local hypertries = 0
local checkSale = false
local dirsEntered = false
local navEntered = false
local hyperCompleted = false
landPref = {}
loadstring(GetVariable("landPref") or "")()

local darkblue = RGBColourToName(GetNormalColour(5))
local gray = RGBColourToName(GetBoldColour(1))
local cyan = RGBColourToName(GetBoldColour(7))


require "tprint"
require "pairsByKeys"
require "serialize"

math.randomseed(os.time())

function flyLand(name, line, args)
  args = utils.split(Trim(args[1]), ",")
  if args and args[1]:lower() == "list" then -- print list
    ColourNote(gray,"","LotJFlight landing preference list:")
    if not landPref then
      ColourNote(gray,"","  List empty.")
    else
      ColourNote(gray,"","  [",darkblue,"","Planet:        ",gray,"","] [",darkblue,"","Landing:            ",gray,"","]")
      for k, v in pairsByKeys(landPref) do
        ColourNote(gray,"","  [",cyan,"",string.format("%-15s",k),gray,"","] [",cyan,"",string.format("%-20s",v),gray,"","]")
      end
    end
  elseif args and args[1]:lower() == "clear" then -- clear list
    landPref = {}
    ColourNote("yellow","","LotJFlight: Landing preference list cleared.")
  elseif args and args[1] == "" then -- entered nothing, display options
    ColourNote("red","","Usage: flyLand list               - display list of landing preferences")
    ColourNote("red","","       flyLand clear              - clear list of landing preferences")
    ColourNote("red","","       flyLand <planet>           - delete specific landing preference")
    ColourNote("red","","       flyLand <planet>,<landing> - save landing preference for given planet")
  elseif args and #args < 2 then -- single argument, check for entry to erase
    local found = false
    for k, v in pairsByKeys(landPref) do
      if k:lower() == args[1]:lower() then -- found entry, delete it
        ColourNote("yellow","","LotJFlight: Planet '"..k.."' deleted from landing preference list.")
        landPref[k] = nil
        found = true
      end
    end
    if not found then
      ColourNote("red","","LotJFlight: Planet '"..args[1].."' not found in landing preference list.")
      return
    end
  else -- 2 arguments in planet,landing format
    landPref[args[1]] = args[2]
    ColourNote("yellow","","LotJFlight: Landing preference '"..args[2].."' designated for planet '"..args[1].."'.")
  end

end

function runDirs(dirs)
  dirs = splitBy(dirs, ",")
  dirs = splitBy(dirs, " ")
  dirs = splitBy(dirs, ";")
  dirs = splitBy(dirs, "|")
  for i, v in ipairs(dirs) do
    if v:lower() ~= "none" then
      Send(v)
    end
  end
end

function splitBy(str, delim)
  local ret = {}
  if type(str) == "string" then
    return utils.split(str, delim)
  elseif type(str) == "table" then
    for i, v in ipairs(str) do
      for k, j in ipairs(utils.split(v, delim)) do
        ret[#ret+1] = j
      end
    end
    return ret
  end
end

function toggleCheckSale(name, line, args)
  checkSale = not checkSale
  ColourNote("yellow","","LotJFlight: Checking for sale spacecraft upon leaving ship is "..((checkSale and "ON") or "OFF")..".")
end

function fighterGrab(name, line, args)
  assert(args, "Nil value passed to fighterGrab")
  local squad = hangars[args.hangarname] or {}
  squad[#squad + 1] = args.fightertype.." '"..args.fightername.."'"
  hangars[args.hangarname] = squad
  --tprint(hangars)
end

function fighterShow(name, line, args, styles)
  if not args.fightertype or not args.fightername then
    return
  end
  for k, v in pairs(hangars) do -- scroll through hangars
    for i, j in ipairs(v) do -- scroll through every saved squad ship
      if args.fightertype.." '"..args.fightername.."'" == j then
        DeleteLines(1)
        for a, b in pairs(styles) do
          ColourTell (RGBColourToName(b.textcolour), RGBColourToName(b.backcolour), b.text) 
        end 
        ColourNote("yellow","","->","gray","","[","red","",k,"gray","","]")
      end
    end
  end
end

function fighterClear()
  hangars = {}
  Note("Squadron information cleared.")
end
  
function reenterCheck()
  if reentership then
    enterShip()
  end
end

function toggleReenter(name, line, args)
  if not args or args[1] == "" then -- entered nothing
    reentership = not reentership
  elseif string.lower(args[1]) == "on" then
    reentership = true
  elseif string.lower(args[1]) == "off" then
    reentership = false
  end
  ColourNote("yellow","","LotJFlight: Will "..((reentership and "") or "not ").."re-enter ship upon arrival.")
end

function flyClear()
	shipName = ""
	hatchCode = -1
	shipEnterDirs = ""
	shipLeaveDirs = ""
  pilotToNav = ""
  navToPilot = ""
	planetName = ""
	lastPlanet = ""
	autoFly = false
	landingSites = {}
	landingSiteNum = 0
	landgrabbing = false
	reentership = false
  checkSale = false
  dirsEntered = false
  navEntered = false
  hyperCompleted = false
	hypertries = 0
	Note("Fly variables cleared.")
	toggleFlyOff()
end

function endFlight()
  if shipLeaveDirs and shipLeaveDirs ~= "" then
    runDirs(shipLeaveDirs)
  end
  Send("openhatch")
  Send("leaveship")
  Send("closehatch "..shipName)
  Send("refuel " .. shipName .. " full")
  if checkSale then
    Send("ships sale")
  end
  landingSites = {}
  lastPlanet = planetName
  if reentership then -- if we are reentering ship, delay toggle off
    DoAfterSpecial(10, 'toggleFlyOff()', sendto.script)
  end
end

coords = {-50000, 0, 50000}

function waitHyper()
  --if not hyperCompleted then
    hypertries = hypertries + 1
    if hypertries >= 10 then
      hypertries = 0
      Send("course "..coords[math.random(3)].." "..coords[math.random(3)].." "..coords[math.random(3)])
    end
    DoAfter(10, "hyper")
  --end
end

function landing()
	Send("shields on")
	Send("autopilot on")
end	

function endLandGrab()
  landingSiteNum = 0
	if (landgrabbing == false) then
		landgrabbing = true
		Note("Grabbing landing sites...")
	else
		landgrabbing = false
		EnableTriggerGroup("landGrab", false)
    local landing = landPref[planetName:lower()]
    if landing and tonumber(landing) then -- pref is a number
      if tonumber(landing) > 0 then -- landing number given
        landArg(tonumber(landing))
      else  -- 0 is auto landing
        landNext()
      end
    elseif landing then -- pref is a word
      if landing:lower() == "auto" or landing:lower() == "0" then -- auto landing
        landNext()
      else -- preference is string match
        local found = false
        for i=0, #landingSites, 1 do
          if landingSites[i] and string.find(landingSites[i]:lower(), landing:lower(), 0, true) then -- pref found
            found = true
            landArg(i)
            return
          end
        end
        if not found then
          ColourNote("red","","Landing preference '"..landing.."' not found in planet's landing pad list.")
        end
      end
    else -- no landing pref, use automatic
      landNext()
    end
	end
end

function landNext()
	landingSiteNum = landingSiteNum + 1
	landArg(landingSiteNum)
end

function landArg(siteNum)
	if (siteNum > #landingSites) then
		Note("Error in auto landing sequence, aborting...")
		toggleFlyOff()
		return
	end
  -- make sure the landing site has a space in it
  if (string.match(landingSites[siteNum], " ")) then
    -- if it's got a space in the name, use only the first word to land
	  Send("land '" .. planetName .. "' " .. utils.split(landingSites[siteNum], " ")[1])
  else
    Send("land '" .. planetName .."' " .. landingSites[siteNum])
  end
end

function landGrab(name, list, args)
	landingSites[#landingSites + 1] = Trim(args[1])
end

function startLandGrab(name, list, args)
	EnableTriggerGroup("landGrab", true)
end

function doLand()
  hyperCompleted = true
	Send("land '" .. planetName .. "'")
end


function coursePlanet()
  hyperCompleted = true
	Send("course '" .. planetName .. "'")
end

function calcEntered()
  if navToPilot and navToPilot ~= "" then
    runDirs(navToPilot)
    Send("pilot")
  end
end

function calcDone()
  hypertries = 1
	Send("hyper")
end

function calcPlanet(name, list, args)
	if (planetName == "") then
		planetName = utils.inputbox("Planet to fly to?", "Planet", "planet", "Courier", 9)
	end
  if not planetName then
    ColourNote("red","","Cancel detected, aborting.")
    return
  end
  if pilotToNav and pilotToNav ~= "" then
    runDirs(pilotToNav)
  end
	Execute("calc " .. planetName)
end		

function flightStatus(name, list, args)
  ColourNote(gray,"","LotJFlight status: ",cyan,"",((autoFly and "Enabled") or "Disabled"))
  ColourNote(gray,"","[",cyan,"","Ship name: "..shipName,gray,"","] [",cyan,"","Hatch: "..hatchCode,gray,"","]")
  ColourNote(gray,"","[",cyan,"","Flying from: "..((lastPlanet~="" and lastPlanet) or "Unknown"),gray,"","]")
  ColourNote(gray,"","[",cyan,"","Flying to: "..((planetName~="" and planetName) or "Unknown"),gray,"","]")
  local landing = landPref[planetName:lower()]
  ColourNote(gray,"","[",cyan,"","Landing preference: "..((landing and landing) or "none stored, using automatic"),gray,"","]")
  ColourNote(gray,"","[",cyan,"","Will "..((reentership and "") or "not ").."re-enter ship upon arrival",gray,"","]")
  ColourNote(gray,"","[",cyan,"","Checking for sale spacecraft upon leaving ship is "..((checkSale and "ON") or "OFF"),gray,"","]")
end

function finishFlight(name, list, args)
	if (args[1] ~= "") then
		planetName = Trim(args[1])
		Note("Planet name: '" .. planetName .. "'")
	end
	toggleFlyOn()
	if (shipName == "" or not shipName) then
		shipName = utils.inputbox("What ship are you in?", "Ship name", "", "Courier", 9)
    if not shipName then
      ColourNote("red","","Cancel detected, aborting.")
      return
    end
	end
  if not navEntered and (pilotToNav and pilotToNav == "") then
    pilotToNav = utils.inputbox("Dirs from pilot to nav station?", "Pilot To Nav", "", "Courier", 9)
  end
  if not navEntered and (navToPilot and navToPilot == "") then
    navToPilot = utils.inputbox("Dirs from nav to pilot station?", "Nav To Pilot", "", "Courier", 9)
    navEntered = true
  end
	if not dirsEntered and (shipEnterDirs and shipEnterDirs == "") then
		shipEnterDirs = utils.inputbox("Dirs to cockpit?\nFormat options:\nSpaces: E U N\nCommas: E,U,N\nSemi-colons: E;U;N\n1-Room Ship: none", "Cockpit", "", "Courier", 9)
	end
	if not dirsEntered and (shipLeaveDirs and shipLeaveDirs == "") then
		shipLeaveDirs = utils.inputbox("Dirs to leave ship?\nFormat options:\nSpaces: S D W\nCommas: S,D,W\nSemi-colons: S;D;W\n1-Room Ship: none", "Exit", "", "Courier", 9)
    dirsEntered = true
	end
	if landPref[planetName:lower()] then
    ColourNote("yellow","","Using saved landing preference '"..landPref[planetName:lower()].."'.")
  else
    ColourNote("red","","No landing preference saved, using automatic landing.")
	end
end

function beginFlight(name, list, args)
	if (args[1] ~= "") then
		planetName = Trim(args[1])
	else
		planetName = utils.inputbox("Enter planet name to fly to:", "Destination", "Planet", "Courier", 9)
    if not planetName then
      ColourNote("red","","Cancel detected, aborting.")
      return
    end
	end
	enterShip()
	toCockpit()
  hyperCompleted = false
	Send("pilot")
	Send("autopilot off")
	Send("launch confirm")
	Send("shields on")
	Note("Flying to: '" .. planetName .. "'")
	toggleFlyOn()
	if landPref[planetName:lower()] then
    ColourNote("yellow","","Using saved landing preference '"..landPref[planetName:lower()].."'.")
  else
    ColourNote("red","","No landing preference saved, using automatic landing.")
	end
end

function enterShip(name, list, args)
	if (shipName == "" or not shipName) then
		shipName = utils.inputbox("Ship to be flown?", "Shipname", "shipname", "Courier", 9)
    if not shipName then
      ColourNote("red","","Cancel detected, aborting.")
      return
    end
	end
	if (hatchCode == -1) then
    local num = utils.inputbox("Hatch code? (0 for none)", "Hatchcode", "0", "Courier", 9)
    if not num then
      ColourNote("red","","Cancel detected, aborting.")
      return
    end
		hatchCode = tonumber(num)
	end
	if (hatchCode < 1) then
		Send("openhatch " .. shipName)
	else
		Send("openhatch " .. shipName .. " " .. hatchCode)
	end
	Send("enter " .. shipName)
	Send("closehatch")
end

function toCockpit(name, list, args)
	if not dirsEntered and (shipEnterDirs and shipEnterDirs == "") then
		shipEnterDirs = utils.inputbox("Dirs to cockpit?\nFormat options:\nSpaces: E U N\nCommas: E,U,N\nSemi-colons: E;U;N\n1-Room Ship: none", "Cockpit", "", "Courier", 9)
	end
	if not dirsEntered and (shipLeaveDirs and shipLeaveDirs == "") then
		shipLeaveDirs = utils.inputbox("Dirs to leave ship?\nFormat options:\nSpaces: S D W\nCommas: S,D,W\nSemi-colons: S;D;W\n1-Room Ship: none", "Exit", "", "Courier", 9)
    dirsEntered = true
	end
  if not navEntered and (pilotToNav and pilotToNav == "") then
    pilotToNav = utils.inputbox("Dirs from pilot to nav station?", "Pilot To Nav", "", "Courier", 9)
  end
  if not navEntered and (navToPilot and navToPilot == "") then
    navToPilot = utils.inputbox("Dirs from nav to pilot station?", "Nav To Pilot", "", "Courier", 9)
    navEntered = true
  end
  if shipEnterDirs and shipEnterDirs ~= "" then
    runDirs(shipEnterDirs)
  end
end

function toggleFlyOn()
	autoFly = true
	EnableTriggerGroup("Flight", true)
	Note("Auto Flight activated.")
end

function toggleFlyOff()
	autoFly = false
	EnableTriggerGroup("Flight", false)
	Note("Auto Flight deactivated.")
end

function flyAuto(name, line, args)
   if (args[1] == "on") then
      toggleFlyOn()
   else
      if (args[1] == "off") then
         toggleFlyOff()
      else
         if(autoFly == true) then
            toggleFlyOff()
         else
            toggleFlyOn()
         end
      end
   end
end

function flightHelp()
	Note("Automatic flight commands:")
	Note("------------------------------")
	Note("Flyto <planet>      - Begin a flight to given planet, while standing in front of ship")
	--Note("Flyto prompt        - Begin a new flight, prompting for parameters")
	Note("Flyfinish <planet>  - Finish a flight already in progress to given planet")
	Note("Flystatus           - Display current status of flight")
	Note("Flyauto on/off      - Enable or disable automatic flight")
	Note("Flyclear            - Clears all current fly variables")
	Note("Flyreenter          - Re-enter your ship at the end of a flight")
  Note("FlyCheckSale        - Check for sale spacecraft at the end of a flight")
	Note("FlyHelp             - Display this help menu")
  Note("FlyLand list        - Display saved landing preferences")
  Note("FlyLand clear       - Clear saved landing preferences")
  Note("FlyLand <planet>    - Delete saved landing preference")
  Note("FlyLand <planet>,<landing> - Store landing preference for given planet")
	Note("\n")
end

function OnPluginSaveState()
  SetVariable("landPref", ((landPref and serialize.save("landPref")) or "")) -- don't set until variable exists
end

require "checkplugin"
function OnPluginListChanged()
	do_plugin_check_now ("b2c06b3dcc775c0ede861316", "LotJCalc") -- check we have LotJCalc Plugin
end


  ]]> 
  </script>
 <!--   Plugin help    -->
  <aliases>
  <alias script="OnHelp" match="LotJFlight:help" enabled="y" /> 
  </aliases>
 <script>
 <![CDATA[ function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

  ]]> 
  </script>
  </muclient>
  
  
