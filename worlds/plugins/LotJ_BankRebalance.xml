<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, August 02, 2021, 2:22 PM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "LotJ_BankRebalance" generated by Plugin Wizard -->

<muclient>
<plugin
   name="LotJ_BankRebalance"
   author="@daljo"
   id="693cd12abb59f30540ac5189"
   language="Lua"
   purpose="Add a `bank rebalance` command to automatically balance your accounts."
   save_state="y"
   date_written="2021-08-02 14:20:21"
   requires="5.06"
   version="1.0.1"
   >
<description trim="y">
<![CDATA[
Just go to a bank and type `bank rebalance`
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   group="bank"
   match="^$"
   name="BankListScrapeEndRebalance"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
-- Turn off our scrape triggers
EnableTrigger( 'BankListScrapeAccts', false )
EnableTrigger( 'BankListScrapeEndRebalance', false )

f, err = loadfile((GetPluginInfo("b3aae34498d5bf19b5b2e2af",20)).."LotJMSDPHelper.lua")

if (f ~= nil) then 
  f()

  -- Do some stuff with it!
  if 1 == ArraySize( 'BankAccounts' ) then
    Note( 'Only one account found!  Nothing to balance.' )
    return
  end

  -- Calculate number of accounts:
  numAccounts = ArraySize( 'BankAccounts' )
  Note( 'Number of Accounts:  ' .. numAccounts )

  -- Calculate total creds:
  totalCreds = 0
  for acct, creds in pairs( ArrayList( 'BankAccounts' ) ) do
    totalCreds = totalCreds + creds
  end
  Note( 'Total Bank Creds:    ' .. totalCreds )

  -- Calculate ideal balances and remainders:
  idealPerAcct = math.floor( totalCreds / numAccounts )
  leftovers = totalCreds - ( idealPerAcct * numAccounts )
  Note( 'Target Account Size: ' .. idealPerAcct .. ' with ' .. leftovers .. ' credits left over.' )

  -- Calculate available credit buffer size:
  credsCarried = tonumber( getmsdp( 'MONEYINV' ) )
  Note( 'Carrying:            ' .. credsCarried .. ' credits.' );

  ArrayCreate 'BankWithdraws'
  ArrayClear 'BankWithdraws'
  ArrayCreate 'BankDeposits'
  ArrayClear 'BankDeposits'

  -- Calculate change in each account needed to affect this:
  for acct, creds in pairs( ArrayList( 'BankAccounts' ) ) do
    creds = tonumber( creds )

    if creds &gt; idealPerAcct then
      ArraySet( 'BankWithdraws', acct, creds - idealPerAcct )
    elseif creds &lt; idealPerAcct then
      ArraySet( 'BankDeposits', acct, idealPerAcct - creds )
    elseif creds == idealPerAcct then
      -- Nothing to do.
    end
  end

  while ( ArraySize( 'BankWithdraws' ) &gt; 0 or ArraySize( 'BankDeposits' ) &gt; 0 ) do
    -- Withdraw the max we can from withdraw accounts.
    while ( credsCarried &lt; 2000000 and ArraySize( 'BankWithdraws' ) &gt; 0 ) do
      acct = ArrayGetFirstKey( 'BankWithdraws' )
      acctCreds = tonumber( ArrayGet( 'BankWithdraws', acct ) )
      if ( acctCreds + credsCarried &gt; 2000000 ) then
        -- If it's got more than I can carry...
        Send( 'bank ' .. acct .. ' withdraw ' .. 2000000 - credsCarried )
        ArraySet( 'BankWithdraws', acct, acctCreds - ( 2000000 - credsCarried ) )
        credsCarried = 2000000
      else
        -- If I've got enough space to cover it...
        Send( 'bank ' .. acct .. ' withdraw ' .. acctCreds )
        ArrayDeleteKey( 'BankWithdraws', acct )
        credsCarried = credsCarried + acctCreds
      end
    end

    -- Deposit the max we can from deposit accounts.
    while ( credsCarried &gt; 0 and ArraySize( 'BankDeposits' ) &gt; 0 ) do
      acct = ArrayGetFirstKey( 'BankDeposits' )
      acctCreds = tonumber( ArrayGet( 'BankDeposits', acct ) )
      if ( acctCreds &gt; credsCarried ) then
        -- If it needs more than I've got, deposit what I can...
        Send( 'bank ' .. acct .. ' deposit ' .. credsCarried )
        ArraySet( 'BankDeposits', acct, acctCreds - credsCarried )
        credsCarried = 0
      else
        -- If I've got enough credits on me...
        Send( 'bank ' .. acct .. ' deposit ' .. acctCreds )
        ArrayDeleteKey( 'BankDeposits', acct )
        credsCarried = credsCarried - acctCreds
      end
    end
  end

  ArrayDelete 'BankAccounts'
  ArrayDelete 'BankWithdraws'
  ArrayDelete 'BankDeposits'

  Send( 'bank list' )
end
    </send>
  </trigger>
  <trigger
   group="bank"
   match="Account                    Amount   "
   name="BankListScrapeStart"
   send_to="12"
   sequence="100"
  >
  <send>
-- Make sure our array is initialized and empty.
ArrayCreate 'BankAccounts'
ArrayClear 'BankAccounts'

-- Turn on our scraping triggers and wrap-up trigger.
EnableTrigger( 'BankListScrapeStart', false )
EnableTrigger( 'BankListScrapeAccts', true )
EnableTrigger( 'BankListScrapeEndRebalance', true )
    </send>
  </trigger>
  <trigger
   group="bank"
   match="^(\d{5}) +([\d\,]+) +$"
   name="BankListScrapeAccts"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
  local amount = ( [==[%2]==] ):gsub( '%D', '' )
  ArraySet( 'BankAccounts', %1, tonumber( amount ) )
  </send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="bank rebalance"
   enabled="y"
   group="bank"
   send_to="12"
   sequence="100"
  >
  <send>
EnableTrigger( 'BankListScrapeStart', true )

Send( 'gold' )
Send( 'bank list' )
    </send>
  </alias>
</aliases>

</muclient>
