<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, July 04, 2012, 2:02 AM -->
<!-- MuClient version 4.43 -->

<!-- Plugin "LotJBuildship" generated by Plugin Wizard -->

<muclient>
<plugin
   name="LotJBuildship"
   author="@Ilyena, @Flek and @Johnson"
   id="48dbd8f76a18f61774974d3a"
   language="Lua"
   purpose="Making ship building easier"
   save_state="y"
   date_written="2012-07-04 02:02:58"
   requires="4.43"
   version="1.42"
   >
<description trim="y">
<![CDATA[
Original script written by @Ilyena and @Flek.
Heavily modified by @Johnson.

Use buildhelp to see building command information.
Use upgradehelp to see upgrade command information.

-- Upgradeship information: --
This plugin utilizes a set of "profiles" to easily save and load sets of modifications
in order to easily upgrade ships. We can achieve this in several ways. The easiest, is
to define a profile and save it for later use.

Method 1: -- saving and loading a modification profile
Step 1: "upgradeProfileName GRCargo"  -- here we define the name we want to use to access the stored preset. Make it something easy like "GRCargo". Notice: profile names must be a single word!
Step 2: "upgradeProfilePartAdd laser -2"  -- here we add a part to the preset indicating we want to remove 2 units of lasers
Step 3: "upgradeProfilePartAdd speed 20 hyper 10 maneuver 30" -- here we add 3 different parts to our preset with a single command, we can do this as many times as we want
Step 4: "upgradeProfileSave"  -- when we've added as many modifications to the preset as we want, we then save it to our global profile list for later use
Step 5: "upgradeLoad GR123 GRCargo"  -- here we load our saved preset GRCargo and indicate that the ship we are going to be modifying is named GR123
Step 6: "upgradeStart"  -- begins modifications based on our GRCargo preset, this can be done any number of times with any combination of different presets

If we are performing quick modifications and we don't have any desire to save them for 
later use, we can use the quick add function to define all our instructions with a single command.

Method 2: -- quick profile without any saving or loading
Step 1: "upgradeAdd GR123 autoblaster -2 laser -2 missiles -4 sensor -5 astro -5 comm -5 speed 10 hyper 10 maneuver 10" 
-- this command does everything at once, bypassing the need for saving or loading any presets
Step 2: "upgradeStart"

Method 3: -- create a preset but push it to the upgrade stack without saving
Step 1: "upgradeProfileName GR123"
Step 2: "upgradeProfilePartAdd autoblaster -5"
Step 3: "upgradeProfilePartAdd speed 20"
Step 4: "upgradePush" -- this command pushes everything we had in our profile into the upgrade stack, bypassing the need to save or load any presets
Step 5: "upgradeStart"

Note: Now supports automatic tuning of ships. Insert "tune 0" as a part type into your profile to tune the ship instead of upgrading.


Changelog
1.40-
Now includes automatic ship upgrading features. Type 'upgradehelp' to see all the associated commands.
1.34-
Increased functionality of buildadd command to include multiple ships.
Example: 'buildadd ship1,ship2,ship3,ship4,ship5'
This string adds as many ships as you specify with a single command.
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger name="FinishedShipMove" script="buildNext"  match="^You step away from your finished (.*)!$" enabled="n" group="Shipbuilding" regexp="y" sequence="100" />
  <trigger name="CopyoverCoverage" script="buildShip" match="^(.*)\[ALERT\]\: EMERGENCY COPYOVER \- Keep calm\, we might pull through\!$" enabled="n" group="Shipbuilding" regexp="y" sequence="100" />
  <trigger name="CopyoverProtection" script="buildShip" match="^(.*) COPYOVER by (.*) \- please remain seated\!$" enabled="n" group="Shipbuilding" regexp="y" sequence="100" />
  <trigger name="GetShipParts" script="getParts" match="You don't have a component like that." enabled="n" group="Shipbuilding" sequence="100" />
  <trigger name="afkOn" script="afkOn" match="You are now afk." enabled="y" group="AFKTracker" sequence="100" />
  <trigger name="afkOff" script="afkOff" match="You are no longer afk." enabled="y" group="AFKTracker" sequence="100" />
  <trigger name="BadBuildShip"  script="buildShip" match="Where to begin? It all looks so complex..." enabled="n" group="Shipbuilding" sequence="100" />
  <trigger name="FailedBuildShip" script="buildShip" match="You step away from *, and realize you've done it all wrong..." enabled="n" group="Shipbuilding" sequence="100" />
  <trigger name="MoveOnToNextPart" script="buildNextPart" match="^Your (.*) doesn\'t need any( (.*))? of that\.$" enabled="n" regexp="y" group="Shipbuilding" sequence="100" />  
  <trigger name="ContinueTheShip" script="buildShip" match="You finish modifying the ship." enabled="n" group="Shipbuilding" sequence="100" />
  <trigger name="ShipBotting" script="ReturnFromAFK" match="You may now bot again." enabled="n" group="Shipbuilding" sequence="100" />
  <trigger name="MoveToNextShip" script="buildNext" match="You don't see a ship like that nearby to work on." enabled="n"  group="Shipbuilding" sequence="100" />
  <trigger name="ResumeonConnect" script="buildShip" match="^Show what to whom\?$" regexp="y" enabled="n" group="Shipbuilding" sequence="100" />
  <trigger name="OutofMoves" script="waitForMoves" match="^You\'re too exhausted to do that right now\!$" regexp="y" enabled="n" group="Shipbuilding" sequence="100" />
  <trigger name="missingpart" script="buildNextPart" match="^I see no (.*) here\.$" enabled="n" regexp="y" group="Shipbuilding" sequence="100" />
  <trigger name="followleader" script="follow" match="* beckons for you to come over to *." regexp="n" group="Shipbuilding" sequence="100" />
  <trigger name="resting" script="stand" match="Nah... You feel too relaxed..." regexp="n" group="Shipbuilding" sequence="100" />
  <trigger name="SpamRemoval1" script="enableEndLine" match="^(.*) steps away from (.*) looking very pleased with (.*)\.$" enabled="n" regexp="y" group="ShipbuildingSpam" omit_from_log="y" omit_from_output="y" sequence="100" />
  <trigger name="SpamRemoval2" script="enableEndLine" match="^(.*) takes (.*) tools and starts to work on (.*)$" enabled="n" regexp="y" group="ShipbuildingSpam" omit_from_log="y" omit_from_output="y" sequence="100" />
  <trigger name="SpamRemoval3" script="enableEndLine" match="^(.*)droid assists(.*)$" enabled="n" regexp="y" group="ShipbuildingSpam" omit_from_log="y" omit_from_output="y" sequence="100" />
  <trigger name="SpamRemoval5" script="enableEndLine" match="^You (.*) engineering experience\.$" enabled="n" regexp="y" group="ShipbuildingSpam" omit_from_log="y" omit_from_output="y" sequence="100" />
  <trigger name="SpamRemoval6" script="enableEndLine" match="^Your droid gains (.*) experience points\.$" enabled="n" regexp="y" group="ShipbuildingSpam" omit_from_log="y" omit_from_output="y" sequence="100" />
  <trigger name="endline" match="^$" enabled="n" regexp="y" group="end_line" omit_from_output="y" sequence="100" send_to="12" >
<send>EnableTrigger("endline", false)</send></trigger>
  
  <!-- upgrade triggers -->
  <trigger name="Upgraded" match="^You (earn|pay) \d+ credits (to complete the modification|after selling the parts)\.$" script="upgradeNextPart" enabled="n" regexp="y" group="Upgrading" sequence="100" />
  <trigger name="CantUpgrade" match="^That change would take that component \d+ units (over max|below minimum)\.$" script="upgradeNextPart" enabled="n" regexp="y" group="Upgrading" sequence="100" />
  <trigger name="FailUpgrade" match="^Hmm\, you didn\'t do much of anything\.$" script="upgrade" enabled="n"  regexp="y" group="Upgrading" sequence="100" />
  <trigger name="NoRoom" match="^Theres not enough room in the ship\! Check your ships \'quota\' value\.$" script="upgradeNextPart" enabled="n" regexp="y" group="Upgrading" sequence="100" />
  <trigger name="TooPoor" match="^You can\'t afford to make those modifications right now\!$" script="upgradeNextPart" enabled="n" regexp="y" group="Upgrading" sequence="100" />
  <trigger name="NoShip" match="^You can\'t seem to find that ship here\!$" script="upgradeNext" enabled="n" regexp="y" group="Upgrading" sequence="100" />
  <trigger name="Nocomponent" match="^Thats not a valid component\! Maybe you should check HELP UPGRADING$" script="upgradeNextPart" enabled="n" regexp="y" group="Upgrading" sequence="100" />
  <trigger name="FinishTune" match="^You finish tuning (.*)\.$" script="upgradeNextPart" enabled="n" regexp="y" group="Upgrading" sequence="100" />
  <trigger name="AlreadyTuned" match="This vessel has already been tuned." script="upgradeNextPart" enabled="n" regexp="n" group="Upgrading" sequence="100" />
</triggers>

<!--  Aliases  -->

<aliases>
  <alias name="BuildAuto" script="buildAuto" match="^buildAuto(.*)?$" enabled="y" group="AutoBuildCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="BuildSpam" script="buildSpam" match="^buildSpam(.*)?$" enabled="y" group="ShipbuildingCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="AddShipToQueue" script="addShip" match="buildadd *" enabled="y" group="ShipbuildingCmd" sequence="100" />
  <alias name="ClearBuildList" script="clearList" match="buildclear" enabled="y" group="ShipbuildingCmd" sequence="100" />
  <alias name="ShowShipQueue" script="showList" match="buildlist" enabled="y" group="ShipbuildingCmd" sequence="100" />
  <alias name="Endurancetoggle" script="enduranceToggle" match="^buildendurance(.*)?" enabled="y" regexp="y" group="Shipbuilding" sequence="100" />
  <alias name="PartNames" script="setPartname" match="^buildpartname (.*) (.*)$" enabled="y" group="ShipbuildingCmd" regexp="y" sequence="100" />
  <alias name="ShowPartNames" script="showPartnames" match="buildpartslist" enabled="y" ignore_case="y" group="ShipbuildingCmd" sequence="100" />
  <alias name="BuildShip" script="buildShip" match="buildship" enabled="y" group="ShipbuildingCmd" sequence="100" />
  <alias name="BuildStart" script="buildStart" match="buildstart" ignore_case="y" enabled="y" group="ShipbuildingCmd" sequence="100" />
  <alias name="BuildNext" script="buildNext" match="buildnext" enabled="y" group="Shipbuilding" ignore_case="y" sequence="100" />
  <alias name="BuildNextPart" script="buildNextPart" match="buildnextpart" enabled="y" group="Shipbuilding" ignore_case="y" sequence="100" />
  <alias name="DisplayBuildCommands" script="buildHelp" match="buildhelp(\s*(.*))?$" enabled="y" regexp="y" ignore_case="y" group="ShipbuildingCmd" sequence="100" />
  
  <!-- upgrade aliases -->
  <alias name="upgradeProfileNamecmd" match="upgradeProfileName( +(.*))?$" script="upgradeProfileName" enabled="y" regexp="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeProfilePartAddcmd" match="upgradeProfilePartAdd *" script="upgradeProfilePartAdd" enabled="y" regexp="n" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeProfilePartRemcmd" match="upgradeProfilePartRem *" script="upgradeProfilePartRem" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeProfilePartClearcmd" match="upgradeProfilePartClear" script="upgradeProfilePartClear" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeProfilePartListcmd" match="upgradeProfilePartList" script="upgradeProfilePartList" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeProfileSavecmd" match="upgradeProfileSave" script="upgradeProfileSave" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeProfileLoadcmd" match="upgradeProfileLoad *" script="upgradeProfileLoad" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeProfileRemcmd" match="upgradeProfileRem *" script="upgradeProfileRem" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeProfileListcmd" match="upgradeProfileList" script="upgradeProfileList" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradePushcmd" match="upgradePush" script="upgradePush" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeLoadcmd" match="upgradeLoad *" script="upgradeLoad" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeAddcmd" match="upgradeAdd * *" script="upgradeAdd" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeRemcmd" match="upgradeRem *" script="upgradeRem" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradePrintcmd" match="upgradeList" script="upgradePrint" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeClearcmd" match="upgradeClear" script="upgradeClear" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradecmd" match="^upgrade(\s+(.*))?$" script="upgrade" enabled="y" regexp="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeStartcmd" match="upgradeStart" script="upgradeStart" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeNextcmd" match="upgradeNext" script="upgradeNext" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeNextPartcmd" match="upgradeNextPart" script="upgradeNextPart" enabled="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeAutocmd" match="^upgradeauto(\s+(.*))?$" script="upgradeAuto" enabled="y" regexp="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
  <alias name="upgradeHelpcmd" match="^upgradehelp(\s*(.*))?$" script="upgradeHelp" enabled="y" regexp="y" ignore_case="y" group="UpgradeCmd" sequence="100" />
</aliases>

<!--  Timers  -->

<timers>
  <timer name="EnduranceMode" script="buildShip" enabled="n" second="5.40" offset_second="0.00" group="Shipbuilding" />
</timers>

<!--  Script  -->
<script>
<![CDATA[

local AUTHOR = GetPluginInfo(GetPluginID(), 2) -- author info
local VERSION = string.format("%1.2f", GetPluginInfo(GetPluginID(), 19)) -- version info

shipParts = {"hull", "circuits", "weapons", "engines"}
partNames = {
	GetVariable("hullpart") or "hull", 
	GetVariable("circuitspart") or "circuits", 
	GetVariable("weaponspart") or "weapons", 
	GetVariable("enginespart") or "engine"
	}
shipQueue = {}
endurance = false
afk = false
autoBuild = false
shipSpam = false
currentShip = 0
currentPart = 0

require "serialize"
-- upgrade stuff
upgradeList = {}
local upgradeitem = ""
local profile = { name = "", mods = {} }
local autoUpgrade = false
local upgradeppos = 0
local upgradespos = 0
profiles = {}
loadstring(GetVariable("profiles") or "") ()

local componentTable = { ["hull"] = { size = .02, cost = 4 },
                        ["shields"] = { size = .03, cost = 20 },
                        ["energy"] = { size = .02, cost = 10 },
                        ["speed"] = { size = .5, cost = 400 },
                        ["hyperspeed"] = { size = .5, cost = 400 },
                        ["maneuver"] = { size = .5, cost = 400 },
                        ["sensor"] = { size = .5, cost = 2500 },
                        ["comm"] = { size = .5, cost = 2500 },
                        ["shield booster"] = { size = 4, cost = 6000 },
                        ["autoblaster"] = { size = 10, cost = 20000 },
                        ["lasers"] = { size = 10, cost = 12000 },
                        ["turbolasers"] = { size = 25, cost = 60000 },
                        ["ion"] = { size = 12, cost = 18000 },
                        ["missile tube"] = { size = 15, cost = 10000 },
                        ["missiles"] = { size = .5, cost = 500 },
                        ["torpedoes"] = { size = 1, cost = 1000 },
                        ["rockets"] = { size = 2, cost = 3000 },
                        ["pulse"] = { size = 2, cost = 12000 },
                        ["chaff"] = { size = .2, cost = 100 },
                        ["small cargo"] = { size = 5, cost = 4000 },
                        ["medium cargo"] = { size = 10, cost = 12000 },
                        ["large cargo"] = { size = 15, cost = 20000 },
                        ["tractorbeam"] = { size = 25, cost = 75000 },
                        ["docking"] = { size = 10, cost = 15000 },
                        ["cloaking"] = { size = 75, cost = 750000 },
                        ["gravity"] = { size = 100, cost = 1000000 },
                        ["tune"] = { size = 0, cost = 0 },
                        }

function enableEndLine()
  EnableTrigger("endline", true)
end
function upgradeProfileName(name, line, args)
  if not args or args[1] == "" then
    ColourNote("yellow","","Profile name set to '"..profile.name.."'")
    return
  end
  profile.name = Trim(args[1])
  ColourNote("yellow","","Profile name set to '"..profile.name.."'")
end
function upgradeProfilePartAdd(name, line, args)
  if not args or args[1] == "" then
    ColourNote("red","","Usage: upgradeProfilePartAdd <part> <amount>")
    return
  end
  local addItems = {}
  if string.find(args[1], ",", 0, true) then
    addItems = utils.split(args[1], ",")
  elseif string.find(args[1], " ", 0, true) then
    addItems = utils.split(args[1], " ")
  else
  	ColourNote("red","","Usage: upgradeProfilePartAdd <part> <amount>")
	  return
	end
  local part = { name = "", amount = 0 }
	local skip = true
	for i, v in ipairs(addItems) do
	  if skip then
	    skip = false
      local found = false
      for k, _ in pairs(componentTable) do -- check component table for valid part name
        if k:lower():find(Trim(v)) then
          found = true
          break
        end
      end
      if found then
        part.name = Trim(v)
      else
        ColourNote("red","","Error: Invalid part type given to upgradeProfilePartAdd. '"..Trim(v).."'")
        return
      end
	  else
	    skip = true
	    part.amount = tonumber(Trim(v))
	    if not part.amount then
	      ColourNote("red","","Usage: upgradeProfilePartAdd <part> <amount>")
	      return
	    end
	    profile.mods[#profile.mods+1] = part
	    ColourNote("yellow","","("..part.name..","..part.amount..") added to current profile.")
	    part = { name = "", amount = 0 }
	  end
	end
end
function upgradeProfilePartRem(name, line, args)
  if not args or args[1] == "" then
    ColourNote("red","","Usage: upgradeProfilePartRem <item/#>")
    return
  end
  for i, v in ipairs(profile.mods) do
    if (tonumber(args[1]) == i) or (string.lower(Trim(args[1])) == string.lower(v.name)) then
      ColourNote("yellow","","Removed '" .. v.name .. "' from profile part list.")
      table.remove(profile.mods, i)
      if (upgradeppos > i) then         -- if our position in the part list is higher than what we remove
        upgradeppos = upgradeppos - 1   -- decrement the pointer to follow the current item
      end
    else
      if (#profile.mods == i) then
        ColourNote("red","","Part '" .. args[1] .. "' not found in profile part list.")
      end
    end
  end
end
function upgradeProfilePartClear(name, line, args)
  profile.mods = {}
  profile.name = ""
  ColourNote("yellow","","Current profile part list cleared.")
end
function upgradeProfilePartList(name, line, args)
  ColourNote("silver","","Current profile part list: ")
  local modlist = profile.mods
  ColourTell("silver","","| ","red","",profile.name,"silver",""," | ")
  local cost = 0
  for k, j in ipairs(modlist) do
    for a, _ in pairs(componentTable) do
      if i:lower():find(j.name) then
        if j.amount < 0 then -- we only get half value when selling parts
          cost = cost + (j.amount * (.5*componentTable[a].cost))
        else
          cost = cost + (j.amount * componentTable[a].cost)
        end
        break
      end
    end
    ColourTell("cyan","",j.name,"silver",""," ","cyan","",((j.amount<0 and "") or "+")..j.amount,"silver",""," | ")
  end
  ColourTell("silver","","Total Cost: ","red","",cost)
  Note()
end
function upgradeProfileSave(name, line, args)
  if profile.name == "" or #profile.mods == 0 then
    ColourNote("red","","Current profile is incomplete, unable to save.")
    return
  end
  profiles[#profiles+1] = profile
  ColourNote("yellow","","Profile '"..profile.name.."' saved.")
  OnPluginSaveState()
  profile = { name = "", mods = {} }
end
function upgradeProfileLoad(name, line, args)
  if not args or args[1] == "" then
    ColourNote("red","","Usage: upgradeProfileLoad <name/#>")
    return
  end
  if not profiles then
    ColourNote("red","","Profile list is empty! Unable to load.")
    return
  end
  for i, v in ipairs(profiles) do
    if (tonumber(args[1]) == i) or (string.lower(Trim(args[1])) == string.lower(v.name)) then
        profile = v
        ColourNote("yellow","","Profile '"..profile.name.."' loaded.")
        return
    else
      if (#profiles == i) then
        ColourNote("red","","Profile '" .. args[1] .. "' not found in profiles list.")
      end
    end
  end
end
function upgradeProfileRem(name, line, args)
  if not args or args[1] == "" then
    ColourNote("red","","Usage: upgradeProfileRem <name/#>")
    return
  end
  for i, v in ipairs(profiles) do
    if (tonumber(args[1]) == i) or (string.lower(Trim(args[1])) == string.lower(v.name)) then
      ColourNote("yellow","","Removed '" .. v.name .. "' from profiles list.")
      table.remove(profiles, i)
    else
      if (#profiles == i) then
        ColourNote("red","","Part '" .. args[1] .. "' not found in profiles list.")
      end
    end
  end
end
function upgradeProfileList(name, line, args)
  ColourNote("silver","","Current profiles list: ")
  for i, v in ipairs(profiles) do
    local modlist = v.mods
    ColourTell("silver","",i.." | ","red","",v.name,"silver",""," | ")
    local cost = 0
    for k, j in ipairs(modlist) do
      for a, _ in pairs(componentTable) do
        if a:lower():find(j.name) then
          if j.amount < 0 then -- we only get half value when selling parts
            cost = cost + (j.amount * (.5*componentTable[a].cost))
          else
            cost = cost + (j.amount * componentTable[a].cost)
          end
          break
        end
      end
      ColourTell("cyan","",j.name,"silver",""," ","cyan","",((j.amount<0 and "") or "+")..j.amount,"silver",""," | ")
    end
    ColourTell("silver","","Total Cost: ","red","",cost)
    Note()
  end
end

function upgradePush(name, line, args)
  if profile.name == "" then
    ColourNote("red","","Current profile is missing a name, unable to push it onto the work list.")
    return
  end
  if not profile.mods then
    ColourNote("red","","Current profile's mod list is empty, unable to push it onto the work list.")
    return
  end
  upgradeList[#upgradeList+1] = profile
  ColourNote("yellow","","Profile '"..profile.name.."' pushed onto the upgradeList work list.")
  profile = { name = "", mods = {} }
end
require "copytable"
function upgradeLoad(name, line, args)
  if not args or args[1] == "" then
    ColourNote("red","","Usage: upgradeLoad <ship> <profile/#>")
    return
  end
  local addItems = {}
  if string.find(args[1], ",", 0, true) then
    addItems = utils.split(args[1], ",")
  elseif string.find(args[1], " ", 0, true) then
    addItems = utils.split(args[1], " ")
  else
  	ColourNote("red","","Usage: upgradeLoad <ship> <profile/#>")
	  return
	end
  local ship = { name = "", mods = {} }
	local skip = true
	for k, j in ipairs(addItems) do
	  if skip then
	    skip = false
	    ship.name = Trim(j)
	  else
	    skip = true
	    local found = false
	    for i, v in ipairs(profiles) do
        if (tonumber(Trim(j)) == i) or (string.lower(Trim(j)) == string.lower(v.name)) then
          found = true
          ship.mods = copytable.deep(v.mods)
          upgradeList[#upgradeList+1] = ship
          ColourNote("yellow","","Ship '"..ship.name.."' added to queue using profile '"..v.name.."'.")
          ship = { name = "", mods = {} }
        end -- if
      end -- for
      if not found then
            ColourNote("red","","Profile '" .. j .. "' not found in profiles list.")
      else
        found = false
      end -- if
    end -- of
  end -- for
end

function upgradeAdd(name, line, args)
  if not args or args[1] == "" or args[2] == "" then
    ColourNote("red","","Usage: upgradeAdd <ship> <parameters>")
    return
  end
  local addItems = {}
  if string.find(args[2], ",", 0, true) then
    addItems = utils.split(args[2], ",")
  --elseif string.find(args[2], " ", 0, true) then -- spaces in part names removes the viability of splitting using spaces
  --  addItems = utils.split(args[2], " ")
  else
  	ColourNote("red","","Usage: upgradeAdd <ship> <parameters>")
	  return
	end
  local ship = { name = Trim(args[1]), mods = {} }
  local mod = { name = "", amount = 0 }
	local skip = true
	for i, v in ipairs(addItems) do
	  if skip then
	    skip = false
      local found = false
      for k, _ in pairs(componentTable) do -- check component table for valid part name
        if k:lower():find(Trim(v)) then
          found = true
          break
        end
      end
      if found then
        mod.name = Trim(v)
      else
        ColourNote("red","","Error: Invalid part type given to upgradeAdd. '"..Trim(v).."'")
        return
      end
	  else
	    skip = true
	    mod.amount = tonumber(Trim(v))
	    if not mod.amount then
	      ColourNote("red","","Usage: upgradeAdd <ship> <parameters>")
	      return
	    end
	    ship.mods[#ship.mods+1] = mod
	    mod = { name = "", amount = 0 }
	  end
	end
	upgradeList[#upgradeList+1] = ship
	ColourNote("yellow","","Added '"..ship.name.."' to upgrade list using custom profile.")
end
function upgradeRem(name, line, args)
  if not args or args[1] == "" then
    ColourNote("red","","Usage: upgradeRem <name/#>")
    return
  end
  for i, v in ipairs(upgradeList) do
    if (tonumber(args[1]) == i) or (string.lower(Trim(args[1])) == string.lower(v.name)) then
      ColourNote("yellow","","Removed '" .. v.name .. "' from upgrade list.")
      table.remove(upgradeList, i)
      return
    else
      if (#upgradeList == i) then
        ColourNote("red","","Ship '" .. args[1] .. "' not found in upgrade list.")
      end
    end
  end
end
function upgradePrint(name, line, args)
  ColourNote("silver","","Current upgrade list: ")
  for i, v in ipairs(upgradeList) do
    local modlist = v.mods
    ColourTell("silver","",i.." | ",((upgradespos == i and "lime") or "red"),"",v.name,"silver",""," | ")
    for k, j in ipairs(modlist) do
      ColourTell((((upgradeppos == k and upgradespos == i) and "lime") or "cyan"),"",j.name,"silver",""," ",(((upgradeppos == k and upgradespos == i) and "lime") or "cyan"),"",((j.amount<0 and "") or "+")..j.amount,"silver",""," | ")
    end
    Tell("\n")
  end
end
function upgradeClear(name, line, args)
  upgradeList = {}
  upgradeppos = 0
  upgradespos = 0
  ColourNote("yellow","","Current upgrade list cleared.")
end
function upgrade(name, line, args)
  if not args or args[1] == "" then -- entered nothing
    if (upgradespos > 0) and (upgradeppos > 0) then -- we're using a list
      if (getUpgradePartAmount() > 0) then -- part amount is over 0
        Send("upgradeship "..getUpgradeShipName().." \""..getUpgradePartName().."\" "..getUpgradePartAmount())
      elseif (getUpgradePartAmount() < 0) then -- part amount is under 0
        Send("dismantle "..getUpgradeShipName().." \""..getUpgradePartName().."\" "..math.abs(getUpgradePartAmount()))
      elseif string.lower(getUpgradePartName()) == "tune" or string.lower(getUpgradePartName()) == "tuneship" then -- tune the ship
        Send("tuneship "..getUpgradeShipName())
      else -- should never get here, but just in case someone entered 0 as an amount, skip to the next part
        upgradeNextPart()
      end
    else -- we're not using a list
      disableUpgrade()
    end
  else -- entered one item
    if Trim(args[1]) == "" then -- clean up blank arguments messing up things
      upgrade()
      return
    end
    upgradeitem = Trim(args[1])
    upgradespos = 0
    upgradeppos = 0
    Send("upgradeship "..upgradeitem)
  end
  EnableTriggerGroup("Upgrade", true)
end
function upgradeStart(name, line, args)
  upgradespos = 0
  upgradeppos = 0
  upgradeitem = ""
  enableUpgrade()
  upgradeNext()
end
function upgradeNext(name, line, args)
  if upgradeitem ~= "" then -- we're not using the list
    upgrade()
    return
  else -- we are using a list
    upgradespos = upgradespos + 1
    if upgradespos > #upgradeList then -- we're at the end of the list
      ColourNote("yellow","","Auto upgrade finished.")
      disableUpgrade()
    else -- we're in the middle of the list
      upgradeppos = 0
      upgradeNextPart()
    end
  end
end
function upgradeNextPart(name, line, args)
  upgradeppos = upgradeppos + 1
  if upgradeppos > #getUpgradeShipMods() then -- we're at the end of the list
      upgradeNext()
  else -- we're in the middle of the list
      upgrade()
  end
end

function getUpgradeShip()
  if #upgradeList == 0 or upgradespos == 0 then
    return {}
  end
  return upgradeList[upgradespos]
end
function getUpgradeShipName()
  if not getUpgradeShip() then
    return ""
  end
  return getUpgradeShip().name
end
function getUpgradeShipMods()
  if not getUpgradeShip() then
    return {}
  end
  return getUpgradeShip().mods
end
function getUpgradePart()
  if #upgradeList == 0 or upgradespos == 0 then
    return ""
  end
  local ship = upgradeList[upgradespos]
  if not ship.mods or #ship.mods == 0 or upgradeppos == 0 then
    return ""
  end
  return ship.mods[upgradeppos]
end
function getUpgradePartName()
  return getUpgradePart().name
end
function getUpgradePartAmount()
  return getUpgradePart().amount
end
function upgradeClear(name, line, args)
  upgradeList = {}
  upgradespos = 0
  upgradeppos = 0
  upgradeitem = ""
  ColourNote("yellow","","Upgrade list cleared.")
  disableUpgrade()
end
function upgradeAuto(name, line, args)
  if not args or args[1] == "" then
    if autoUpgrade then
      disableUpgrade()
    else
      enableUpgrade()
    end
  elseif string.lower(Trim(args[1])) == "on" then
    enableUpgrade()
  else
    disableUpgrade()
  end
end
function enableUpgrade()
  if autoUpgrade then
    return
  end
  autoUpgrade = true
  EnableTriggerGroup("Upgrading", true)
  ColourNote("yellow","","Auto upgrade enabled.")
end
function disableUpgrade()
  if not autoUpgrade then
    return
  end
  autoUpgrade = false
  EnableTriggerGroup("Upgrading", false)
  ColourNote("yellow","","Auto upgrade disabled.")
end

function follow(name, line, args)
  if not args or args[1] == "" then
    return
  end
  if afk then
    Send("afk")
    Send("follow "..args[1])
    Send("afk")
  else
    Send("follow "..args[1])
    buildShip()
  end
end

function stand(name, line, args)
  Send("stand")
  buildShip()
end

function addShip(name, line, wildcards)
	local addLines = utils.split(wildcards[1], ",") -- add multiple items using commas as delimiters
	if addLines then
		for i=1,#addLines, 1 do
			shipQueue[#shipQueue + 1] = addLines[i]
			ColourNote("lawngreen", "black", "Added '" .. shipQueue[#shipQueue] .. "' to ship queue.")
		end
	else
		shipQueue[#shipQueue + 1] = wildcards[1]
		ColourNote("lawngreen", "black", "Added '" .. shipQueue[#shipQueue] .. "' to ship queue.")
	end
end -- function

function buildStart(name, line, wildcards)
	if (autoBuild) then  --  if you were previously building	
		for i = 1, #partNames, 1 do
			Send("drop all." .. partNames[i]) -- drop all previously used parts to start fresh
		end -- for
	end
	if (#shipQueue > 0) then -- we have stuff to build!
		currentShip = 0
		toggleOn()
		toggleSpamOn()
		buildNext()
	else -- nothing to build!
		abort()
	end
end -- function

function buildShip(name, line, wildcards)
  if not shipQueue[currentShip] or not shipParts[currentPart] then
    abort()
    return
  end
  Send("buildship " .. shipQueue[currentShip] .. " " .. shipParts[currentPart])
end

function buildNext(name, line, wildcards)
	if (autoBuild) then  --  if you were previously building	
		for i = 1, #partNames, 1 do
			Send("drop all." .. partNames[i]) -- drop all previously used parts to start fresh
		end -- for
	end
	currentShip = currentShip + 1
	if (currentShip > #shipQueue) then -- if we're at the end of the list
		abort()
	else
		currentPart = 0
		buildNextPart()
	end
end -- function

function abort(name, line, args)
	ColourNote("lawngreen", "black", "Shipbuilding complete.")
	disableEndurance()
	toggleSpamOff()
	toggleOff()
	for i = 1, #partNames, 1 do
		Send("drop all." .. partNames[i])
	end -- for
end

function buildNextPart(name, line, wildcards)
	if (currentPart > 0) then
		Send("drop all." .. partNames[currentPart])
	end
	currentPart = currentPart + 1
	if (currentPart > #partNames) then
		currentPart = 1
		buildNext()
	else
	  getParts()
	end -- if
end -- function

function ReturnFromAFK(name, line, wildcards)
	if (afk) then
		Send("afk")
	end
	Send("bot start")
	if (endurance == true) then
		enableEndurance()
	else
		buildShip()
	end -- if
end -- function

function getParts(name, line, wildcards)
	Send("get 10 " .. partNames[currentPart])
	buildShip()
end -- function


function setPartname(name, line, wildcards)
	if (wildcards[1] == "hull") then
		partNames[1] = wildcards[2]
		ColourNote("lawngreen","black","Part type '" .. shipParts[1] .. "' coupled with '" .. partNames[1] .. "'")
	elseif (wildcards[1] == "circuits") then
		partNames[2] = wildcards[2]
		ColourNote("lawngreen","black","Part type '" .. shipParts[2] .. "' coupled with '" .. partNames[2] .. "'")
	elseif (wildcards[1] == "weapons") then
		partNames[3] = wildcards[2]
		ColourNote("lawngreen","black","Part type '" .. shipParts[3] .. "' coupled with '" .. partNames[3] .. "'")
	elseif (wildcards[1] == "engines") then
		partNames[4] = wildcards[2]
		ColourNote("lawngreen","black","Part type '" .. shipParts[4] .. "' coupled with '" .. partNames[4] .. "'")
	else
		ColourNote("red","","Part type not found")
	end -- if
	OnPluginSaveState()
end -- function

function showPartnames()
	ColourNote("silver","","Partnames are as follows: ")
	for i, v in ipairs(shipParts) do
		if (currentPart == i) then
			ColourNote("lime","black", "--]>" .. shipParts[i] .. " = " .. partNames[i] .. "<[--")
		else
			ColourNote("silver","",shipParts[i] .. " = " .. partNames[i])
		end
	end -- for
end -- function

function showList()
	ColourNote("silver","","Ship Queue Contains: ")
	for i, v in ipairs(shipQueue) do
		if (currentShip == i) then
			ColourNote("lime","", "--]>"..i..") "..shipQueue[i].."<[--")
		else
			ColourNote("silver","",i..") "..shipQueue[i])
		end
	end -- for
	showPartnames()
end -- function


function afkOn(name, list, args)
	afk = true
end

function afkOff(name, list, args)
	afk = false
end

function toggleOn(name, list, args)
	Send("config -prompt")
	EnableTriggerGroup("Shipbuilding", true)
	autoBuild = true
	ColourNote("lawngreen", "black", "Shipbuilding activated.")
end

function toggleOff(name, list, args)
	Send("config +prompt")
	EnableTriggerGroup("Shipbuilding", false)
	autoBuild = false
	ColourNote("lawngreen", "black", "Shipbuilding deactivated.")
end

function buildAuto(name, line, args)
	if (args[1] ~= "") then -- arg found
		if (Trim(args[1]) == "on") then -- turn on
			toggleOn()
		elseif (Trim(args[1]) == "off") then -- turn off
			toggleOff()
		else
			ColourNote("red", "black", "Unrecognized argument given to buildAuto: " .. args[1])
		end
	else -- no arg found
		if (autoBuild == false) then -- turn on
			toggleOn()
		else
			toggleOff()
		end
	end
end

function toggleSpamOn(name, list, args)
	EnableTriggerGroup("ShipbuildingSpam", true)
	shipSpam = true
	ColourNote("lawngreen", "black", "Shipbuilding spam gagged.")
end

function toggleSpamOff(name, list, args)
	EnableTriggerGroup("ShipbuildingSpam", false)
	shipSpam = false
	ColourNote("lawngreen", "black", "Shipbuilding spam shown.")
end

function buildSpam(name, line, args)
	if (args[1] ~= "") then -- arg found
		if (Trim(args[1]) == "on") then -- turn on
			toggleSpamOn()
		elseif (Trim(args[1]) == "off") then -- turn off
			toggleSpamOff()
		else
			ColourNote("red", "black", "Unrecognized argument given to buildSpam: " .. args[1])
		end
	else -- no arg found
		if (shipSpam == false) then -- turn on
			toggleSpamOn()
		else
			toggleSpamOff()
		end
	end
end

function TidyUp(name, line, wildcards)
	DeleteLines(1)
end -- function

function clearList(name, line, wildcards)
	shipQueue = {}
	ColourNote("lawngreen", "black", "Ship Build List Cleared!")
end -- function

function waitForMoves()
  Send("rest")
  DoAfter(120, "stand")
  DoAfterSpecial(121, 'buildShip()', sendto.script)
end

function disableEndurance(name, line, wildcards)
  if not endurance then
    return
  end
	EnableTimer("EnduranceMode", false)
	EnableTrigger("ContinueTheShip", true)
	EnableTrigger("FailedBuildShip", true)
	ColourNote("red", "black", "Endurance Mode Deactivated")
	endurance = false
end -- function

function enableEndurance(name, line, wildcards)
  if endurance then
    return
  end
	EnableTimer("EnduranceMode", true)
	EnableTrigger("ContinueTheShip", false)
	EnableTrigger("FailedBuildShip", false)
	ColourNote("lawngreen", "black", "Endurance Mode Activated")
	endurance = true
end -- function

function enduranceToggle(name, line, args)
	if (args[1] ~= "") then -- arg found
		if (Trim(args[1]) == "on") then -- turn on
			enableEndurance()
		elseif (Trim(args[1]) == "off") then -- turn off
			disableEndurance()
		else
			ColourNote("red", "black", "Unrecognized argument given to buildendurance: " .. args[1])
		end
	else -- no arg found
		if (endurance == false) then -- turn on
			enableEndurance()
		else
			disableEndurance()
		end
	end
end

function OnPluginSaveState()
	SetVariable("hullpart", partNames[1])
	SetVariable("circuitspart", partNames[2])
	SetVariable("weaponspart", partNames[3])
	SetVariable("enginespart", partNames[4])
  SetVariable("profiles", serialize.save("profiles"))
end -- OnPluginSaveState

function BuildCommandHelp(name, list, wildcards)
	ColourNote("lawngreen", "black", "buildadd #- Add a ship to the build queue")
	ColourNote("lawngreen", "black", "buildclear - Clear the ship queue")
	ColourNote("lawngreen", "black", "buildlist - Display the build queue")
	ColourNote("lawngreen", "black", "buildship - Builds current ship")
	ColourNote("lawngreen", "black", "buildstart - Begin building first ship in list")
	ColourNote("lawngreen", "black", "buildnext - Skip to next ship in the list")
	ColourNote("lawngreen", "black", "buildnextpart - Skip to next part in current ship")
	ColourNote("lawngreen", "black", "buildendurance on/off - Turn the timer setting on and off. Useful for not running out of movement on smaller ships")
	ColourNote("lawngreen", "black", "buildpartname <buildname> <getname> - Change the name of a part name to match the item you pick up")
	ColourNote("lawngreen", "black", "buildpartslist - Display the relations between parts and their pickup names")
	ColourNote("lawngreen", "black", "buildauto on/off - Turn automatic building on or off.")
	ColourNote("lawngreen", "black", "buildspam on/off - Turn the build spam filters on or off.")
end -- function

-- define our build help command structure
local buildcommands = { { name = "buildAdd", desc = "Adds a new ship to the shipbuilding queue.",
                         args = { { name = "<name>", desc = "Adds the given ship name to the shipbuilding queue."}, }
                          },
               { name = "buildClear", desc = "Clears the current shipbuilding queue.",
                        args = { }
                          },
               { name = "buildList", desc = "Displays the current shipbuilding queue.",
                        args = { }
                          },
               { name = "buildShip", desc = "Performs a single shipbuilding command.",
                        args = { }
                          },
               { name = "buildStart", desc = "Begins building ships from the beginning of the queue.",
                        args = { }
                          },
               { name = "buildNext", desc = "Skips to the next ship in the build queue and starts building.",
                        args = { }
                          },
               { name = "buildNextPart", desc = "Skips to the next part on the current ship.",
                        args = { }
                          },
               { name = "buildEndurance", desc = "Toggles endurance mode building on or off.",
                        args = { }
                          },
               { name = "buildPartName", desc = "Assigns a new part name to the specified component type.",
                        args = { { name = "<partname> <parttype>", desc = "Assigns a new <partname> to the specified <parttype> if the item used for building has a different keyword."}, }
                          },
               { name = "buildPartsList", desc = "Displays the currently assigned part names.",
                        args = { }
                          },
               { name = "buildAuto", desc = "Toggles automatic building on or off.",
                        args = { { name = "<on/off>", desc = "Sets automatic building to the given mode."}, }
                          },
               { name = "buildSpam", desc = "Toggles whether shipbuilding spam is shown or removed from the screen.",
                        args = { { name = "<on/off>", desc = "Sets building spam display to the given mode."}, }
                          },
               { name = "buildHelp", desc = "Display this help file.",
                        args = { { name = "<command>", desc = "Display more detailed help information on the given command."} }
                          },
               { name = "upgradeHelp", desc = "Display help file for upgrading commands.",
                        args = { { name = "<command>", desc = "Display more detailed help information on the given command."} }
                          },

                           }

function buildHelp(name, line, args)
  local found = false
  if args[1] == "" then -- show general help
    ColourNote("white","black","LotJBuildship v"..VERSION.." by "..AUTHOR..". Enter 'buildhelp <command>' for more detailed information.")
    for a, b in ipairs(buildcommands) do -- commands
      local command = b
      ColourNote("silver","black",string.format("%-20s", command.name).." : "..command.desc)
    end
    Note("")
  else -- entered something
    ColourNote("white","black","LotJBuildship v"..VERSION.." by "..AUTHOR..". Enter 'buildhelp' for more general information.")

    for a, b in ipairs(buildcommands) do -- scroll through commands
    
      if (string.lower(b.name) == string.lower(Trim(args[1]))) then -- found our argument
        found = true
        ColourNote("silver","black",b.name .. " : " .. b.desc)
        ColourNote("silver","black","Available arguments:")
        if #b.args == 0 then -- no arguments
          ColourNote("silver","black","   None.")
        else -- arguments to print
          for i, k in ipairs(b.args) do
            ColourNote("silver","black",string.format("%20s", k.name).." : " .. k.desc)
          end -- end print arguments
        end -- end no arguments
        Note("")
      end -- end found command
    end -- end scroll commands
    if not found then
      ColourNote("silver","black","Command '"..args[1].."' not found.")
    end
  end -- end no input
end

-- define our upgrade help command structure
local upgradecommands = { { name = "upgradeProfileName", desc = "Changes the name of the profile to be added.",
                         args = { { name = "<none>", desc = "Displays the current profile's name." },
                                  { name = "<name>", desc = "Specifies the name of the current profile."}, }
                          },
               { name = "upgradeProfilePartAdd", desc = "Adds a part to the profile's part list.",
                        args = { { name = "<name> <amount>", desc = "Adds a part to the profile's part list."}, }
                          },
               { name = "upgradeProfilePartRem", desc = "Removes a part from the profile's part list.",
                        args = { { name = "<name>", desc = "Removes a part matching the given name from the profile's part list."},
                                 { name = "<number>", desc = "Removes the list # from the profile's part list."}, }
                          },
               { name = "upgradeProfilePartClear", desc = "Deletes the current profile's part list.",
                        args = { }
                          },
               { name = "upgradeProfilePartList", desc = "Displays the current profile's part list.",
                        args = { }
                          },
               { name = "upgradeProfileSave", desc = "Saves the current profile into memory.",
                        args = { }
                          },
               { name = "upgradeProfileLoad", desc = "Loads a saved profile into the current profile slot.",
                        args = { { name = "<name>", desc = "Loads the profile matching the given name into the current profile slot."}, 
                                 { name = "<number>", desc = "Loads the profile in the given # into the current profile slot."}, }
                          },
               { name = "upgradeProfileRem", desc = "Removes a profile from memory.",
                        args = { { name = "<name>", desc = "Removes the profile matching the given name from memory."},
                                 { name = "<number>", desc = "Removes the profile located at the given number from memory."},  }
                          },
               { name = "upgradeProfileList", desc = "Displays the list of saved profiles.",
                        args = { }
                          },
               { name = "upgradePush", desc = "Adds the current profile into the upgradeList queue without saving it to memory.",
                        args = { }
                          },
               { name = "upgradeLoad", desc = "Loads a ship to the upgradeList queue using a saved profile.",
                        args = { { name = "<ship> <profile>", desc = "Adds <ship> to the upgradeList queue using the given <profile> modification list."}, 
                                 { name = "<ship> <number>", desc = "Adds <ship> to the upgradeList queue using the profile located at <number>."}, }
                          },
               { name = "upgradeAdd", desc = "Adds a ship to the upgradeList queue using a custom profile.",
                        args = { { name = "<ship> <part1> <amount1> <part2> <amount2>", desc = "Adds <ship> to the upgradeList queue using the given modification list."}, 
                                 { name = "<ship> <part1>,<amount1>,<part2>,<amount2>", desc = "Adds <ship> to the upgradeList queue using the given modification list."}, }
                          },
               { name = "upgradeRem", desc = "Removes a ship from the upgradeList queue.",
                        args = { { name = "<name>", desc = "Removes all ships matching the given name from the upgradeList queue."}, 
                                 { name = "<number>", desc = "Removes the ship located at the given number from the upgradeList queue."}, }
                          },
               { name = "upgradeList", desc = "Displays the current upgradeList queue.",
                        args = { }
                          },
               { name = "upgradeClear", desc = "Deletes the current upgradeList queue.",
                        args = { }
                          },
               { name = "upgrade", desc = "Performs an upgrade based on the current script position, or a new upgrade based on string given.",
                        args = { { name = "<none>", desc = "Performs an upgrade based on the current script positions."}, 
                                 { name = "<ship> <item> <amount>", desc = "Performs a new upgrade independent from the script."},  }
                          },
               { name = "upgradeStart", desc = "Begins upgrading from the beginning of the current upgradeList queue.",
                        args = { }
                          },
               { name = "upgradeNext", desc = "Begins upgrade the next ship in the upgradeList queue.",
                        args = { }
                          },
               { name = "upgradeNextPart", desc = "Skips to the next part in the current ship.",
                        args = { }
                          },
               { name = "upgradeAuto", desc = "Toggles automatic upgrading on or off.",
                        args = { { name = "<none>", desc = "Toggles automatic upgrading on or off."},
                                 { name = "<on/off>", desc = "Turns automatic upgrading on or off based on given command."}, }
                          },

               { name = "upgradehelp", desc = "Display this help file.",
                        args = { { name = "<command>", desc = "Display more detailed help information on the given command."} }
                          },
               { name = "buildHelp", desc = "Display help file for shipbuilding commands.",
                        args = { { name = "<command>", desc = "Display more detailed help information on the given command."} }
                          },
                           }
                           
--upgradeProfileName <name>                 Changes the name of the profile to be added.
--upgradeProfilePartAdd <name> <amount>     Adds a part to the profile's part list.
--upgradeProfilePartRem <name/#>            Removes a part from the profile's part list.
--upgradeProfilePartClear                   Clears the profile's part list.
--upgradeProfilePartList                    Lists the profile's part list.
--upgradeProfileSave <name>                 Saves the staging ship as a profile to be reused.
--upgradeProfileLoad <name/#>               Loads a profile into the current staging ship.
--upgradeProfileRem <name/#>                Removes a profile from your saved list.
--upgradeProfileList                        Lists all of your saved ship profiles.
--upgradePush                               Pushes the current profile onto the work list without saving.
--upgradeAdd <shipname> <profilename>       Adds a ship to be worked on using profile.
--upgradeRem <shipname/#>                   Removes a ship from the list using name/number.
--upgradeList                               Lists the current upgrade list.
--upgradeClear                              Clears the current upgrade list.
--upgradeStart                              Starts upgrading from beginning of list.
--upgradeNext                               Starts upgrading next ship in list.
--upgradeNextPart                           Starts upgrading next part in profile list.
function upgradeHelp(name, line, args)
  local found = false
  if args[1] == "" then -- show general help
    ColourNote("white","black","LotJUpgrade v"..VERSION.." by "..AUTHOR..". Enter 'upgradehelp <command>' for more detailed information.")
    for a, b in ipairs(upgradecommands) do -- commands
      local command = b
      ColourNote("silver","black",string.format("%-20s", command.name).." : "..command.desc)
    end
    Note("")
  else -- entered something
    ColourNote("white","black","LotJUpgrade v"..VERSION.." by "..AUTHOR..". Enter 'upgradehelp' for more general information.")

    for a, b in ipairs(upgradecommands) do -- scroll through commands
    
      if (string.lower(b.name) == string.lower(Trim(args[1]))) then -- found our argument
        found = true
        ColourNote("silver","black",b.name .. " : " .. b.desc)
        ColourNote("silver","black","Available arguments:")
        if #b.args == 0 then -- no arguments
          ColourNote("silver","black","   None.")
        else -- arguments to print
          for i, k in ipairs(b.args) do
            ColourNote("silver","black",string.format("%20s", k.name).." : " .. k.desc)
          end -- end print arguments
        end -- end no arguments
        Note("")
      end -- end found command
    end -- end scroll commands
    if not found then
      ColourNote("silver","black","Command '"..args[1].."' not found.")
    end
  end -- end no input
end




]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="LotJBuildship:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
